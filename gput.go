package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

const (
	identityUrl = "https://identity.api.rackspacecloud.com/v2.0/tokens"
	apiKey      = "f0a0d5090040ff0650a76fdf751537c7"
	authRequest = `{ "auth": {
				"RAX-KSKEY:apiKeyCredentials": {
					"apiKey": "%s",
					"username": "ekontsevoy"
				}}}`
)

// This data structure is returned as JSON when we authenticate.
// Generated by ChimeraCoder/gojson from curl/auth_output.json
type AuthResponse struct {
	Access struct {
		ServiceCatalog []struct {
			Endpoints []struct {
				PublicURL string `json:"publicURL"`
				Region    string `json:"region"`
				TenantID  string `json:"tenantId"`
			} `json:"endpoints"`
			Name string `json:"name"`
			Type string `json:"type"`
		} `json:"serviceCatalog"`
		Token struct {
			RAX_AUTH_authenticatedBy []string `json:"RAX-AUTH:authenticatedBy"`
			Expires                  string   `json:"expires"`
			ID                       string   `json:"id"`
			Tenant                   struct {
				ID   string `json:"id"`
				Name string `json:"name"`
			} `json:"tenant"`
		} `json:"token"`
		User struct {
			RAX_AUTH_defaultRegion string `json:"RAX-AUTH:defaultRegion"`
			ID                     string `json:"id"`
			Name                   string `json:"name"`
			Roles                  []struct {
				Description string `json:"description"`
				ID          string `json:"id"`
				Name        string `json:"name"`
				TenantID    string `json:"tenantId"`
			} `json:"roles"`
		} `json:"user"`
	} `json:"access"`
}

// Authenticates against Rackspace Auth and returns an authentication token
func authenticate() (authToken string, err error) {
	// HTTP POST to auth URL:
	requestBody := fmt.Sprintf(authRequest, apiKey)
	response, err := http.Post(identityUrl, "application/json", strings.NewReader(requestBody))
	if err != nil {
		return
	}
	if response.StatusCode != 200 {
		err = errors.New(response.Status)
		return
	}
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return
	}

	// Parse JSON
	var r AuthResponse
	err = json.Unmarshal(responseBody, &r)
	if err != nil {
		return
	}

	// enumerate CloudFiles entry points:
	for _, service := range r.Access.ServiceCatalog {
		if service.Type == "object-store" {
			for _, endpoint := range service.Endpoints {
				fmt.Printf("URL: %v in %v\n", endpoint.PublicURL, endpoint.Region)
			}
		}
	}

	authToken = r.Access.Token.ID
	return authToken, err
}

func main() {
	authToken, err := authenticate()
	if err != nil {
		fmt.Printf("%v when trying to authenticate\n", err)
		return
	}
	fmt.Printf("%v\n", authToken)
}

func panicIf(err error) {
	if err != nil {
		panic(err)
	}
}
